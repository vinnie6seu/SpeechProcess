/*
 * ShmSpeechToText.cpp
 *
 *  Created on: 2018年7月9日
 *      Author: yaoqiaobing
 */
#include "Shm/asr/ShmSpeechToText.hpp"

/******************************** asr shm  ********************************/

void ShmSpeechToText::init(int shmKey, int shmSpeechToTextItemNum) {
	_shmKey = shmKey;
	_shmSpeechToTextItemNum = shmSpeechToTextItemNum;

	_shmSize = _shmSpeechToTextItemNum * sizeof(ShmSpeechToTextItem);
}

FUN_STATUS ShmSpeechToText::writeSpeechRecordShm(void* shmMemPointStart, ShmSpeechToTextItem& shmSpeechToTextItem) {

	ShmSpeechToTextHead* shmSpeechToTextHead = (ShmSpeechToTextHead*) shmMemPointStart;

	int totalRecordsNum = shmSpeechToTextHead->_total;                                  // 总的共享内存[语音-文本]记录数
	int freeRecordsNum = shmSpeechToTextHead->_free;                                    // 剩余量
	int pointRecordsIndex = (shmSpeechToTextHead->_pointIndex + 1) % totalRecordsNum;   // 上次写入语音的共享内存记录数组索引

	if (freeRecordsNum <= 0) {
		_lastErrorBuf = "write shm error. no space for write";
		return FAILURE;
	}

	// 最近能写入的
	int count = 0;

	int offset = shmSpeechToTextHead->_offset;

	ShmSpeechToTextItem* start = (ShmSpeechToTextItem*) ((char*) shmMemPointStart + offset);

	while (count < freeRecordsNum) {
		if ((start + pointRecordsIndex)->_flag == ITEM_FLAG_CAN_WRITE_SPEECH) {
			break;
		}
		pointRecordsIndex = (pointRecordsIndex + 1) % totalRecordsNum;
		count++;
	}
	if (count >= freeRecordsNum) {
		_lastErrorBuf = "write shm error. no space for write";
		return FAILURE;
	}

	if (pthread_mutex_lock(&((start + pointRecordsIndex)->_itemMptr)) != 0) {

	}

	// 修改item中flag为1
	(start + pointRecordsIndex)->_flag = ITEM_FLAG_CALL_ASR_WORKING;

	if (pthread_mutex_lock(&(shmSpeechToTextHead->_headMptr)) != 0) {

	}

	// 修改head中free + 1
	shmSpeechToTextHead->_free = freeRecordsNum - 1;
	// 修改head中最近写入指向pointRecordsIndex
	shmSpeechToTextHead->_pointIndex = pointRecordsIndex;

	if (pthread_mutex_unlock(&(shmSpeechToTextHead->_headMptr)) != 0) {

	}

	if (pthread_mutex_unlock(&((start + pointRecordsIndex)->_itemMptr)) != 0) {

	}

	// 修改item中id
	(start + pointRecordsIndex)->_id = pointRecordsIndex;

	// 写入语音到item中
	memcpy((start + pointRecordsIndex)->_speech, shmSpeechToTextItem._speech, sizeof(shmSpeechToTextItem._speech));

	// 告知调用者写在了那个index中
	shmSpeechToTextItem._id = pointRecordsIndex;
	shmSpeechToTextItem._flag = ITEM_FLAG_CALL_ASR_WORKING;

	return SUCCESS;
}

FUN_STATUS ShmSpeechToText::writeTextRecordShm(void* shmMemPointStart, int id, ShmSpeechToTextItem& shmSpeechToTextItem) {

	ShmSpeechToTextHead* shmSpeechToTextHead = (ShmSpeechToTextHead*) shmMemPointStart;

	int offset = shmSpeechToTextHead->_offset;

	ShmSpeechToTextItem* start = (ShmSpeechToTextItem*) ((char*) shmMemPointStart + offset);

	// 在指定位置写文本数据
	memcpy((start + id)->_text, shmSpeechToTextItem._text, sizeof(shmSpeechToTextItem._text));
	// 修改flag状态为2
	(start + id)->_flag = ITEM_FLAG_CAN_GET_TEXT;

	return SUCCESS;
}

FUN_STATUS ShmSpeechToText::readSpeechRecordShm(void* shmMemPointStart, int id, ShmSpeechToTextItem& shmSpeechToTextItem) {
	ShmSpeechToTextHead* shmSpeechToTextHead = (ShmSpeechToTextHead*) shmMemPointStart;

	int offset = shmSpeechToTextHead->_offset;

	ShmSpeechToTextItem* start = (ShmSpeechToTextItem*) ((char*) shmMemPointStart + offset);

	// 读走item中共享内存语音数据
	memcpy(shmSpeechToTextItem._speech, (start + id)->_speech, sizeof(shmSpeechToTextItem._speech));
	// 读走item中共享内存flag状态
	shmSpeechToTextItem._flag = (start + id)->_flag;

	return SUCCESS;
}

FUN_STATUS ShmSpeechToText::readTextRecordShm(void* shmMemPointStart, int id, ShmSpeechToTextItem& shmSpeechToTextItem) {

	ShmSpeechToTextHead* shmSpeechToTextHead = (ShmSpeechToTextHead*) shmMemPointStart;

	int offset = shmSpeechToTextHead->_offset;

	ShmSpeechToTextItem* start = (ShmSpeechToTextItem*) ((char*) shmMemPointStart + offset);

	// 读走item中共享内存文本数据
	memcpy(shmSpeechToTextItem._text, (start + id)->_text, sizeof(shmSpeechToTextItem._text));
	shmSpeechToTextItem._flag = (start + id)->_flag;

	if (pthread_mutex_lock(&((start + id)->_itemMptr)) != 0) {

	}

	// 修改item中flag状态为0
	(start + id)->_flag = ITEM_FLAG_CAN_WRITE_SPEECH;

	if (pthread_mutex_lock(&(shmSpeechToTextHead->_headMptr)) != 0) {

	}
	// 修改head中free + 1
	shmSpeechToTextHead->_free = shmSpeechToTextHead->_free + 1;

	if (pthread_mutex_unlock(&(shmSpeechToTextHead->_headMptr)) != 0) {

	}

	if (pthread_mutex_unlock(&((start + id)->_itemMptr)) != 0) {

	}

	return SUCCESS;
}


